//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DynaPad.DynaPadService {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DynaPadServiceSoap", Namespace="http://dynadox.pro/service")]
    public partial class DynaPadService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloDynaOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildDynaMenuOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessDynaFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilesByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnswerPresetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllAnswerPresetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogPresetRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveAnswerPresetOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAnswerPresetJsonOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAnswerPresetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveDictationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDicatationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormDictationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllAutoBoxDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateIME4OperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateSummaryFromHtmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllQuestionnairesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitFormAnswersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormQuestionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDoctorInputOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDynaReportsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateDynaReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback PdfToPngOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertPDFtoPNGOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertPNGtoPDFOperationCompleted;
        
        /// CodeRemarks
        public DynaPadService() {
            this.Url = "http://www.dynadox.pro/dynawcfservice/dynapadservice.asmx";
        }
        
        public DynaPadService(string url) {
            this.Url = url;
        }
        
        /// CodeRemarks
        public event HelloDynaCompletedEventHandler HelloDynaCompleted;
        
        /// CodeRemarks
        public event BuildDynaMenuCompletedEventHandler BuildDynaMenuCompleted;
        
        /// CodeRemarks
        public event ProcessDynaFilesCompletedEventHandler ProcessDynaFilesCompleted;
        
        /// CodeRemarks
        public event GetFilesByDateCompletedEventHandler GetFilesByDateCompleted;
        
        /// CodeRemarks
        public event GetFilesCompletedEventHandler GetFilesCompleted;
        
        /// CodeRemarks
        public event SaveFileCompletedEventHandler SaveFileCompleted;
        
        /// CodeRemarks
        public event GetAnswerPresetsCompletedEventHandler GetAnswerPresetsCompleted;
        
        /// CodeRemarks
        public event GetAllAnswerPresetsCompletedEventHandler GetAllAnswerPresetsCompleted;
        
        /// CodeRemarks
        public event LogPresetRequestCompletedEventHandler LogPresetRequestCompleted;
        
        /// CodeRemarks
        public event SaveAnswerPresetCompletedEventHandler SaveAnswerPresetCompleted;
        
        /// CodeRemarks
        public event UpdateAnswerPresetJsonCompletedEventHandler UpdateAnswerPresetJsonCompleted;
        
        /// CodeRemarks
        public event DeleteAnswerPresetCompletedEventHandler DeleteAnswerPresetCompleted;
        
        /// CodeRemarks
        public event SaveDictationCompletedEventHandler SaveDictationCompleted;
        
        /// CodeRemarks
        public event DeleteDicatationCompletedEventHandler DeleteDicatationCompleted;
        
        /// CodeRemarks
        public event GetFormDictationsCompletedEventHandler GetFormDictationsCompleted;
        
        /// CodeRemarks
        public event GetAllAutoBoxDataCompletedEventHandler GetAllAutoBoxDataCompleted;
        
        /// CodeRemarks
        public event GenerateIME4CompletedEventHandler GenerateIME4Completed;
        
        /// CodeRemarks
        public event GenerateSummaryFromHtmlCompletedEventHandler GenerateSummaryFromHtmlCompleted;
        
        /// CodeRemarks
        public event GenerateSummaryCompletedEventHandler GenerateSummaryCompleted;
        
        /// CodeRemarks
        public event GetAllQuestionnairesCompletedEventHandler GetAllQuestionnairesCompleted;
        
        /// CodeRemarks
        public event SubmitFormAnswersCompletedEventHandler SubmitFormAnswersCompleted;
        
        /// CodeRemarks
        public event GetFormQuestionsCompletedEventHandler GetFormQuestionsCompleted;
        
        /// CodeRemarks
        public event GetDoctorInputCompletedEventHandler GetDoctorInputCompleted;
        
        /// CodeRemarks
        public event GetDynaReportsCompletedEventHandler GetDynaReportsCompleted;
        
        /// CodeRemarks
        public event CreateDynaReportCompletedEventHandler CreateDynaReportCompleted;
        
        /// CodeRemarks
        public event GenerateReportCompletedEventHandler GenerateReportCompleted;
        
        /// CodeRemarks
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// CodeRemarks
        public event PdfToPngCompletedEventHandler PdfToPngCompleted;
        
        /// CodeRemarks
        public event ConvertPDFtoPNGCompletedEventHandler ConvertPDFtoPNGCompleted;
        
        /// CodeRemarks
        public event ConvertPNGtoPDFCompletedEventHandler ConvertPNGtoPDFCompleted;
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/HelloDyna", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloDyna() {
            object[] results = this.Invoke("HelloDyna", new object[0]);
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void HelloDynaAsync() {
            this.HelloDynaAsync(null);
        }
        
        /// CodeRemarks
        public void HelloDynaAsync(object userState) {
            if ((this.HelloDynaOperationCompleted == null)) {
                this.HelloDynaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloDynaOperationCompleted);
            }
            this.InvokeAsync("HelloDyna", new object[0], this.HelloDynaOperationCompleted, userState);
        }
        
        private void OnHelloDynaOperationCompleted(object arg) {
            if ((this.HelloDynaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloDynaCompleted(this, new HelloDynaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/BuildDynaMenu", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BuildDynaMenu(ConfigurationObjects domainConfig, string locationId, string locationName) {
            object[] results = this.Invoke("BuildDynaMenu", new object[] {
                        domainConfig,
                        locationId,
                        locationName});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void BuildDynaMenuAsync(ConfigurationObjects domainConfig, string locationId, string locationName) {
            this.BuildDynaMenuAsync(domainConfig, locationId, locationName, null);
        }
        
        /// CodeRemarks
        public void BuildDynaMenuAsync(ConfigurationObjects domainConfig, string locationId, string locationName, object userState) {
            if ((this.BuildDynaMenuOperationCompleted == null)) {
                this.BuildDynaMenuOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildDynaMenuOperationCompleted);
            }
            this.InvokeAsync("BuildDynaMenu", new object[] {
                        domainConfig,
                        locationId,
                        locationName}, this.BuildDynaMenuOperationCompleted, userState);
        }
        
        private void OnBuildDynaMenuOperationCompleted(object arg) {
            if ((this.BuildDynaMenuCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildDynaMenuCompleted(this, new BuildDynaMenuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/ProcessDynaFiles", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessDynaFiles(ConfigurationObjects domainConfig, string stringDynaFiles) {
            object[] results = this.Invoke("ProcessDynaFiles", new object[] {
                        domainConfig,
                        stringDynaFiles});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void ProcessDynaFilesAsync(ConfigurationObjects domainConfig, string stringDynaFiles) {
            this.ProcessDynaFilesAsync(domainConfig, stringDynaFiles, null);
        }
        
        /// CodeRemarks
        public void ProcessDynaFilesAsync(ConfigurationObjects domainConfig, string stringDynaFiles, object userState) {
            if ((this.ProcessDynaFilesOperationCompleted == null)) {
                this.ProcessDynaFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessDynaFilesOperationCompleted);
            }
            this.InvokeAsync("ProcessDynaFiles", new object[] {
                        domainConfig,
                        stringDynaFiles}, this.ProcessDynaFilesOperationCompleted, userState);
        }
        
        private void OnProcessDynaFilesOperationCompleted(object arg) {
            if ((this.ProcessDynaFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessDynaFilesCompleted(this, new ProcessDynaFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/GetFilesByDate", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFilesByDate(ConfigurationObjects domainConfig, string locationId, string dateToDownload) {
            object[] results = this.Invoke("GetFilesByDate", new object[] {
                        domainConfig,
                        locationId,
                        dateToDownload});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetFilesByDateAsync(ConfigurationObjects domainConfig, string locationId, string dateToDownload) {
            this.GetFilesByDateAsync(domainConfig, locationId, dateToDownload, null);
        }
        
        /// CodeRemarks
        public void GetFilesByDateAsync(ConfigurationObjects domainConfig, string locationId, string dateToDownload, object userState) {
            if ((this.GetFilesByDateOperationCompleted == null)) {
                this.GetFilesByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilesByDateOperationCompleted);
            }
            this.InvokeAsync("GetFilesByDate", new object[] {
                        domainConfig,
                        locationId,
                        dateToDownload}, this.GetFilesByDateOperationCompleted, userState);
        }
        
        private void OnGetFilesByDateOperationCompleted(object arg) {
            if ((this.GetFilesByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilesByDateCompleted(this, new GetFilesByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/GetFiles", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFiles(ConfigurationObjects domainConfig, string apptId, string patientId, string patientName, string doctorId, string locationId) {
            object[] results = this.Invoke("GetFiles", new object[] {
                        domainConfig,
                        apptId,
                        patientId,
                        patientName,
                        doctorId,
                        locationId});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetFilesAsync(ConfigurationObjects domainConfig, string apptId, string patientId, string patientName, string doctorId, string locationId) {
            this.GetFilesAsync(domainConfig, apptId, patientId, patientName, doctorId, locationId, null);
        }
        
        /// CodeRemarks
        public void GetFilesAsync(ConfigurationObjects domainConfig, string apptId, string patientId, string patientName, string doctorId, string locationId, object userState) {
            if ((this.GetFilesOperationCompleted == null)) {
                this.GetFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilesOperationCompleted);
            }
            this.InvokeAsync("GetFiles", new object[] {
                        domainConfig,
                        apptId,
                        patientId,
                        patientName,
                        doctorId,
                        locationId}, this.GetFilesOperationCompleted, userState);
        }
        
        private void OnGetFilesOperationCompleted(object arg) {
            if ((this.GetFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilesCompleted(this, new GetFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/SaveFile", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveFile(ConfigurationObjects domainConfig, string apptId, string patientId, string doctorId, string locationId, string fileName, string fileType, string folderName, string filePathPhysical, string filePathVirtual, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] arrFile, bool isDoctorForm, bool isSignature) {
            object[] results = this.Invoke("SaveFile", new object[] {
                        domainConfig,
                        apptId,
                        patientId,
                        doctorId,
                        locationId,
                        fileName,
                        fileType,
                        folderName,
                        filePathPhysical,
                        filePathVirtual,
                        arrFile,
                        isDoctorForm,
                        isSignature});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void SaveFileAsync(ConfigurationObjects domainConfig, string apptId, string patientId, string doctorId, string locationId, string fileName, string fileType, string folderName, string filePathPhysical, string filePathVirtual, byte[] arrFile, bool isDoctorForm, bool isSignature) {
            this.SaveFileAsync(domainConfig, apptId, patientId, doctorId, locationId, fileName, fileType, folderName, filePathPhysical, filePathVirtual, arrFile, isDoctorForm, isSignature, null);
        }
        
        /// CodeRemarks
        public void SaveFileAsync(ConfigurationObjects domainConfig, string apptId, string patientId, string doctorId, string locationId, string fileName, string fileType, string folderName, string filePathPhysical, string filePathVirtual, byte[] arrFile, bool isDoctorForm, bool isSignature, object userState) {
            if ((this.SaveFileOperationCompleted == null)) {
                this.SaveFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFileOperationCompleted);
            }
            this.InvokeAsync("SaveFile", new object[] {
                        domainConfig,
                        apptId,
                        patientId,
                        doctorId,
                        locationId,
                        fileName,
                        fileType,
                        folderName,
                        filePathPhysical,
                        filePathVirtual,
                        arrFile,
                        isDoctorForm,
                        isSignature}, this.SaveFileOperationCompleted, userState);
        }
        
        private void OnSaveFileOperationCompleted(object arg) {
            if ((this.SaveFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFileCompleted(this, new SaveFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/GetAnswerPresets", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] GetAnswerPresets(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, string locationId) {
            object[] results = this.Invoke("GetAnswerPresets", new object[] {
                        domainConfig,
                        formId,
                        sectionId,
                        doctorId,
                        locationId});
            return ((string[][])(results[0]));
        }
        
        /// CodeRemarks
        public void GetAnswerPresetsAsync(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, string locationId) {
            this.GetAnswerPresetsAsync(domainConfig, formId, sectionId, doctorId, locationId, null);
        }
        
        /// CodeRemarks
        public void GetAnswerPresetsAsync(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, string locationId, object userState) {
            if ((this.GetAnswerPresetsOperationCompleted == null)) {
                this.GetAnswerPresetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnswerPresetsOperationCompleted);
            }
            this.InvokeAsync("GetAnswerPresets", new object[] {
                        domainConfig,
                        formId,
                        sectionId,
                        doctorId,
                        locationId}, this.GetAnswerPresetsOperationCompleted, userState);
        }
        
        private void OnGetAnswerPresetsOperationCompleted(object arg) {
            if ((this.GetAnswerPresetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnswerPresetsCompleted(this, new GetAnswerPresetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/GetAllAnswerPresets", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllAnswerPresets(ConfigurationObjects domainConfig, string userId, bool isForceUpdate) {
            object[] results = this.Invoke("GetAllAnswerPresets", new object[] {
                        domainConfig,
                        userId,
                        isForceUpdate});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllAnswerPresetsAsync(ConfigurationObjects domainConfig, string userId, bool isForceUpdate) {
            this.GetAllAnswerPresetsAsync(domainConfig, userId, isForceUpdate, null);
        }
        
        /// CodeRemarks
        public void GetAllAnswerPresetsAsync(ConfigurationObjects domainConfig, string userId, bool isForceUpdate, object userState) {
            if ((this.GetAllAnswerPresetsOperationCompleted == null)) {
                this.GetAllAnswerPresetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllAnswerPresetsOperationCompleted);
            }
            this.InvokeAsync("GetAllAnswerPresets", new object[] {
                        domainConfig,
                        userId,
                        isForceUpdate}, this.GetAllAnswerPresetsOperationCompleted, userState);
        }
        
        private void OnGetAllAnswerPresetsOperationCompleted(object arg) {
            if ((this.GetAllAnswerPresetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllAnswerPresetsCompleted(this, new GetAllAnswerPresetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/LogPresetRequest", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogPresetRequest(ConfigurationObjects domainConfig, string deviceName, string requestDateTime, int presetCount) {
            this.Invoke("LogPresetRequest", new object[] {
                        domainConfig,
                        deviceName,
                        requestDateTime,
                        presetCount});
        }
        
        /// CodeRemarks
        public void LogPresetRequestAsync(ConfigurationObjects domainConfig, string deviceName, string requestDateTime, int presetCount) {
            this.LogPresetRequestAsync(domainConfig, deviceName, requestDateTime, presetCount, null);
        }
        
        /// CodeRemarks
        public void LogPresetRequestAsync(ConfigurationObjects domainConfig, string deviceName, string requestDateTime, int presetCount, object userState) {
            if ((this.LogPresetRequestOperationCompleted == null)) {
                this.LogPresetRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogPresetRequestOperationCompleted);
            }
            this.InvokeAsync("LogPresetRequest", new object[] {
                        domainConfig,
                        deviceName,
                        requestDateTime,
                        presetCount}, this.LogPresetRequestOperationCompleted, userState);
        }
        
        private void OnLogPresetRequestOperationCompleted(object arg) {
            if ((this.LogPresetRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogPresetRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/SaveAnswerPreset", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveAnswerPreset(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, bool isDocInput, string presetName, string presetJson, string locationId, string existingPresetId) {
            object[] results = this.Invoke("SaveAnswerPreset", new object[] {
                        domainConfig,
                        formId,
                        sectionId,
                        doctorId,
                        isDocInput,
                        presetName,
                        presetJson,
                        locationId,
                        existingPresetId});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void SaveAnswerPresetAsync(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, bool isDocInput, string presetName, string presetJson, string locationId, string existingPresetId) {
            this.SaveAnswerPresetAsync(domainConfig, formId, sectionId, doctorId, isDocInput, presetName, presetJson, locationId, existingPresetId, null);
        }
        
        /// CodeRemarks
        public void SaveAnswerPresetAsync(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, bool isDocInput, string presetName, string presetJson, string locationId, string existingPresetId, object userState) {
            if ((this.SaveAnswerPresetOperationCompleted == null)) {
                this.SaveAnswerPresetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveAnswerPresetOperationCompleted);
            }
            this.InvokeAsync("SaveAnswerPreset", new object[] {
                        domainConfig,
                        formId,
                        sectionId,
                        doctorId,
                        isDocInput,
                        presetName,
                        presetJson,
                        locationId,
                        existingPresetId}, this.SaveAnswerPresetOperationCompleted, userState);
        }
        
        private void OnSaveAnswerPresetOperationCompleted(object arg) {
            if ((this.SaveAnswerPresetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveAnswerPresetCompleted(this, new SaveAnswerPresetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/UpdateAnswerPresetJson", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateAnswerPresetJson(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, string presetJson, string existingPresetId) {
            object[] results = this.Invoke("UpdateAnswerPresetJson", new object[] {
                        domainConfig,
                        formId,
                        sectionId,
                        doctorId,
                        presetJson,
                        existingPresetId});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void UpdateAnswerPresetJsonAsync(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, string presetJson, string existingPresetId) {
            this.UpdateAnswerPresetJsonAsync(domainConfig, formId, sectionId, doctorId, presetJson, existingPresetId, null);
        }
        
        /// CodeRemarks
        public void UpdateAnswerPresetJsonAsync(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, string presetJson, string existingPresetId, object userState) {
            if ((this.UpdateAnswerPresetJsonOperationCompleted == null)) {
                this.UpdateAnswerPresetJsonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAnswerPresetJsonOperationCompleted);
            }
            this.InvokeAsync("UpdateAnswerPresetJson", new object[] {
                        domainConfig,
                        formId,
                        sectionId,
                        doctorId,
                        presetJson,
                        existingPresetId}, this.UpdateAnswerPresetJsonOperationCompleted, userState);
        }
        
        private void OnUpdateAnswerPresetJsonOperationCompleted(object arg) {
            if ((this.UpdateAnswerPresetJsonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAnswerPresetJsonCompleted(this, new UpdateAnswerPresetJsonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/DeleteAnswerPreset", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAnswerPreset(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, string existingPresetId) {
            this.Invoke("DeleteAnswerPreset", new object[] {
                        domainConfig,
                        formId,
                        sectionId,
                        doctorId,
                        existingPresetId});
        }
        
        /// CodeRemarks
        public void DeleteAnswerPresetAsync(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, string existingPresetId) {
            this.DeleteAnswerPresetAsync(domainConfig, formId, sectionId, doctorId, existingPresetId, null);
        }
        
        /// CodeRemarks
        public void DeleteAnswerPresetAsync(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, string existingPresetId, object userState) {
            if ((this.DeleteAnswerPresetOperationCompleted == null)) {
                this.DeleteAnswerPresetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAnswerPresetOperationCompleted);
            }
            this.InvokeAsync("DeleteAnswerPreset", new object[] {
                        domainConfig,
                        formId,
                        sectionId,
                        doctorId,
                        existingPresetId}, this.DeleteAnswerPresetOperationCompleted, userState);
        }
        
        private void OnDeleteAnswerPresetOperationCompleted(object arg) {
            if ((this.DeleteAnswerPresetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAnswerPresetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/SaveDictation", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveDictation(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, bool isDocInput, string locationId, string dictationTitle, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] arrDictation) {
            object[] results = this.Invoke("SaveDictation", new object[] {
                        domainConfig,
                        formId,
                        sectionId,
                        doctorId,
                        isDocInput,
                        locationId,
                        dictationTitle,
                        arrDictation});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void SaveDictationAsync(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, bool isDocInput, string locationId, string dictationTitle, byte[] arrDictation) {
            this.SaveDictationAsync(domainConfig, formId, sectionId, doctorId, isDocInput, locationId, dictationTitle, arrDictation, null);
        }
        
        /// CodeRemarks
        public void SaveDictationAsync(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, bool isDocInput, string locationId, string dictationTitle, byte[] arrDictation, object userState) {
            if ((this.SaveDictationOperationCompleted == null)) {
                this.SaveDictationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveDictationOperationCompleted);
            }
            this.InvokeAsync("SaveDictation", new object[] {
                        domainConfig,
                        formId,
                        sectionId,
                        doctorId,
                        isDocInput,
                        locationId,
                        dictationTitle,
                        arrDictation}, this.SaveDictationOperationCompleted, userState);
        }
        
        private void OnSaveDictationOperationCompleted(object arg) {
            if ((this.SaveDictationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveDictationCompleted(this, new SaveDictationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/DeleteDicatation", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteDicatation(ConfigurationObjects domainConfig, string dictationId, string formId, string sectionId, string doctorId) {
            object[] results = this.Invoke("DeleteDicatation", new object[] {
                        domainConfig,
                        dictationId,
                        formId,
                        sectionId,
                        doctorId});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void DeleteDicatationAsync(ConfigurationObjects domainConfig, string dictationId, string formId, string sectionId, string doctorId) {
            this.DeleteDicatationAsync(domainConfig, dictationId, formId, sectionId, doctorId, null);
        }
        
        /// CodeRemarks
        public void DeleteDicatationAsync(ConfigurationObjects domainConfig, string dictationId, string formId, string sectionId, string doctorId, object userState) {
            if ((this.DeleteDicatationOperationCompleted == null)) {
                this.DeleteDicatationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDicatationOperationCompleted);
            }
            this.InvokeAsync("DeleteDicatation", new object[] {
                        domainConfig,
                        dictationId,
                        formId,
                        sectionId,
                        doctorId}, this.DeleteDicatationOperationCompleted, userState);
        }
        
        private void OnDeleteDicatationOperationCompleted(object arg) {
            if ((this.DeleteDicatationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDicatationCompleted(this, new DeleteDicatationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/GetFormDictations", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] GetFormDictations(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, bool isDocInput, string locationId) {
            object[] results = this.Invoke("GetFormDictations", new object[] {
                        domainConfig,
                        formId,
                        sectionId,
                        doctorId,
                        isDocInput,
                        locationId});
            return ((string[][])(results[0]));
        }
        
        /// CodeRemarks
        public void GetFormDictationsAsync(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, bool isDocInput, string locationId) {
            this.GetFormDictationsAsync(domainConfig, formId, sectionId, doctorId, isDocInput, locationId, null);
        }
        
        /// CodeRemarks
        public void GetFormDictationsAsync(ConfigurationObjects domainConfig, string formId, string sectionId, string doctorId, bool isDocInput, string locationId, object userState) {
            if ((this.GetFormDictationsOperationCompleted == null)) {
                this.GetFormDictationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormDictationsOperationCompleted);
            }
            this.InvokeAsync("GetFormDictations", new object[] {
                        domainConfig,
                        formId,
                        sectionId,
                        doctorId,
                        isDocInput,
                        locationId}, this.GetFormDictationsOperationCompleted, userState);
        }
        
        private void OnGetFormDictationsOperationCompleted(object arg) {
            if ((this.GetFormDictationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormDictationsCompleted(this, new GetFormDictationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/GetAllAutoBoxData", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllAutoBoxData(string rootPhysical, string rootVirtual) {
            object[] results = this.Invoke("GetAllAutoBoxData", new object[] {
                        rootPhysical,
                        rootVirtual});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllAutoBoxDataAsync(string rootPhysical, string rootVirtual) {
            this.GetAllAutoBoxDataAsync(rootPhysical, rootVirtual, null);
        }
        
        /// CodeRemarks
        public void GetAllAutoBoxDataAsync(string rootPhysical, string rootVirtual, object userState) {
            if ((this.GetAllAutoBoxDataOperationCompleted == null)) {
                this.GetAllAutoBoxDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllAutoBoxDataOperationCompleted);
            }
            this.InvokeAsync("GetAllAutoBoxData", new object[] {
                        rootPhysical,
                        rootVirtual}, this.GetAllAutoBoxDataOperationCompleted, userState);
        }
        
        private void OnGetAllAutoBoxDataOperationCompleted(object arg) {
            if ((this.GetAllAutoBoxDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllAutoBoxDataCompleted(this, new GetAllAutoBoxDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/GenerateIME4", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateIME4(ConfigurationObjects domainConfig, string apptId) {
            object[] results = this.Invoke("GenerateIME4", new object[] {
                        domainConfig,
                        apptId});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GenerateIME4Async(ConfigurationObjects domainConfig, string apptId) {
            this.GenerateIME4Async(domainConfig, apptId, null);
        }
        
        /// CodeRemarks
        public void GenerateIME4Async(ConfigurationObjects domainConfig, string apptId, object userState) {
            if ((this.GenerateIME4OperationCompleted == null)) {
                this.GenerateIME4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateIME4OperationCompleted);
            }
            this.InvokeAsync("GenerateIME4", new object[] {
                        domainConfig,
                        apptId}, this.GenerateIME4OperationCompleted, userState);
        }
        
        private void OnGenerateIME4OperationCompleted(object arg) {
            if ((this.GenerateIME4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateIME4Completed(this, new GenerateIME4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/GenerateSummaryFromHtml", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateSummaryFromHtml(ConfigurationObjects domainConfig, string summaryHtml, string patientId, string patientName, string apptId, string locationId, string doctorId, bool isDoctorForm) {
            object[] results = this.Invoke("GenerateSummaryFromHtml", new object[] {
                        domainConfig,
                        summaryHtml,
                        patientId,
                        patientName,
                        apptId,
                        locationId,
                        doctorId,
                        isDoctorForm});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GenerateSummaryFromHtmlAsync(ConfigurationObjects domainConfig, string summaryHtml, string patientId, string patientName, string apptId, string locationId, string doctorId, bool isDoctorForm) {
            this.GenerateSummaryFromHtmlAsync(domainConfig, summaryHtml, patientId, patientName, apptId, locationId, doctorId, isDoctorForm, null);
        }
        
        /// CodeRemarks
        public void GenerateSummaryFromHtmlAsync(ConfigurationObjects domainConfig, string summaryHtml, string patientId, string patientName, string apptId, string locationId, string doctorId, bool isDoctorForm, object userState) {
            if ((this.GenerateSummaryFromHtmlOperationCompleted == null)) {
                this.GenerateSummaryFromHtmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateSummaryFromHtmlOperationCompleted);
            }
            this.InvokeAsync("GenerateSummaryFromHtml", new object[] {
                        domainConfig,
                        summaryHtml,
                        patientId,
                        patientName,
                        apptId,
                        locationId,
                        doctorId,
                        isDoctorForm}, this.GenerateSummaryFromHtmlOperationCompleted, userState);
        }
        
        private void OnGenerateSummaryFromHtmlOperationCompleted(object arg) {
            if ((this.GenerateSummaryFromHtmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateSummaryFromHtmlCompleted(this, new GenerateSummaryFromHtmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/GenerateSummary", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateSummary(ConfigurationObjects domainConfig, string answers) {
            object[] results = this.Invoke("GenerateSummary", new object[] {
                        domainConfig,
                        answers});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GenerateSummaryAsync(ConfigurationObjects domainConfig, string answers) {
            this.GenerateSummaryAsync(domainConfig, answers, null);
        }
        
        /// CodeRemarks
        public void GenerateSummaryAsync(ConfigurationObjects domainConfig, string answers, object userState) {
            if ((this.GenerateSummaryOperationCompleted == null)) {
                this.GenerateSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateSummaryOperationCompleted);
            }
            this.InvokeAsync("GenerateSummary", new object[] {
                        domainConfig,
                        answers}, this.GenerateSummaryOperationCompleted, userState);
        }
        
        private void OnGenerateSummaryOperationCompleted(object arg) {
            if ((this.GenerateSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateSummaryCompleted(this, new GenerateSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/GetAllQuestionnaires", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllQuestionnaires(ConfigurationObjects domainConfig, string userId) {
            object[] results = this.Invoke("GetAllQuestionnaires", new object[] {
                        domainConfig,
                        userId});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetAllQuestionnairesAsync(ConfigurationObjects domainConfig, string userId) {
            this.GetAllQuestionnairesAsync(domainConfig, userId, null);
        }
        
        /// CodeRemarks
        public void GetAllQuestionnairesAsync(ConfigurationObjects domainConfig, string userId, object userState) {
            if ((this.GetAllQuestionnairesOperationCompleted == null)) {
                this.GetAllQuestionnairesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllQuestionnairesOperationCompleted);
            }
            this.InvokeAsync("GetAllQuestionnaires", new object[] {
                        domainConfig,
                        userId}, this.GetAllQuestionnairesOperationCompleted, userState);
        }
        
        private void OnGetAllQuestionnairesOperationCompleted(object arg) {
            if ((this.GetAllQuestionnairesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllQuestionnairesCompleted(this, new GetAllQuestionnairesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/SubmitFormAnswers", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SubmitFormAnswers(ConfigurationObjects domainConfig, string answers, bool update, bool isDoctorInput, bool doGenerateReport) {
            object[] results = this.Invoke("SubmitFormAnswers", new object[] {
                        domainConfig,
                        answers,
                        update,
                        isDoctorInput,
                        doGenerateReport});
            return ((bool)(results[0]));
        }
        
        /// CodeRemarks
        public void SubmitFormAnswersAsync(ConfigurationObjects domainConfig, string answers, bool update, bool isDoctorInput, bool doGenerateReport) {
            this.SubmitFormAnswersAsync(domainConfig, answers, update, isDoctorInput, doGenerateReport, null);
        }
        
        /// CodeRemarks
        public void SubmitFormAnswersAsync(ConfigurationObjects domainConfig, string answers, bool update, bool isDoctorInput, bool doGenerateReport, object userState) {
            if ((this.SubmitFormAnswersOperationCompleted == null)) {
                this.SubmitFormAnswersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitFormAnswersOperationCompleted);
            }
            this.InvokeAsync("SubmitFormAnswers", new object[] {
                        domainConfig,
                        answers,
                        update,
                        isDoctorInput,
                        doGenerateReport}, this.SubmitFormAnswersOperationCompleted, userState);
        }
        
        private void OnSubmitFormAnswersOperationCompleted(object arg) {
            if ((this.SubmitFormAnswersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitFormAnswersCompleted(this, new SubmitFormAnswersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/GetFormQuestions", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFormQuestions(ConfigurationObjects domainConfig, string formId, string doctorId, string locationId, string patientId, string patientName, string caseId, string apptId, bool isDocInput) {
            object[] results = this.Invoke("GetFormQuestions", new object[] {
                        domainConfig,
                        formId,
                        doctorId,
                        locationId,
                        patientId,
                        patientName,
                        caseId,
                        apptId,
                        isDocInput});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetFormQuestionsAsync(ConfigurationObjects domainConfig, string formId, string doctorId, string locationId, string patientId, string patientName, string caseId, string apptId, bool isDocInput) {
            this.GetFormQuestionsAsync(domainConfig, formId, doctorId, locationId, patientId, patientName, caseId, apptId, isDocInput, null);
        }
        
        /// CodeRemarks
        public void GetFormQuestionsAsync(ConfigurationObjects domainConfig, string formId, string doctorId, string locationId, string patientId, string patientName, string caseId, string apptId, bool isDocInput, object userState) {
            if ((this.GetFormQuestionsOperationCompleted == null)) {
                this.GetFormQuestionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormQuestionsOperationCompleted);
            }
            this.InvokeAsync("GetFormQuestions", new object[] {
                        domainConfig,
                        formId,
                        doctorId,
                        locationId,
                        patientId,
                        patientName,
                        caseId,
                        apptId,
                        isDocInput}, this.GetFormQuestionsOperationCompleted, userState);
        }
        
        private void OnGetFormQuestionsOperationCompleted(object arg) {
            if ((this.GetFormQuestionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormQuestionsCompleted(this, new GetFormQuestionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/GetDoctorInput", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDoctorInput(ConfigurationObjects domainConfig, string formId) {
            object[] results = this.Invoke("GetDoctorInput", new object[] {
                        domainConfig,
                        formId});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetDoctorInputAsync(ConfigurationObjects domainConfig, string formId) {
            this.GetDoctorInputAsync(domainConfig, formId, null);
        }
        
        /// CodeRemarks
        public void GetDoctorInputAsync(ConfigurationObjects domainConfig, string formId, object userState) {
            if ((this.GetDoctorInputOperationCompleted == null)) {
                this.GetDoctorInputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDoctorInputOperationCompleted);
            }
            this.InvokeAsync("GetDoctorInput", new object[] {
                        domainConfig,
                        formId}, this.GetDoctorInputOperationCompleted, userState);
        }
        
        private void OnGetDoctorInputOperationCompleted(object arg) {
            if ((this.GetDoctorInputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDoctorInputCompleted(this, new GetDoctorInputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/GetDynaReports", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDynaReports(ConfigurationObjects domainConfig, string qFormID, string docId, bool showcase) {
            object[] results = this.Invoke("GetDynaReports", new object[] {
                        domainConfig,
                        qFormID,
                        docId,
                        showcase});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetDynaReportsAsync(ConfigurationObjects domainConfig, string qFormID, string docId, bool showcase) {
            this.GetDynaReportsAsync(domainConfig, qFormID, docId, showcase, null);
        }
        
        /// CodeRemarks
        public void GetDynaReportsAsync(ConfigurationObjects domainConfig, string qFormID, string docId, bool showcase, object userState) {
            if ((this.GetDynaReportsOperationCompleted == null)) {
                this.GetDynaReportsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDynaReportsOperationCompleted);
            }
            this.InvokeAsync("GetDynaReports", new object[] {
                        domainConfig,
                        qFormID,
                        docId,
                        showcase}, this.GetDynaReportsOperationCompleted, userState);
        }
        
        private void OnGetDynaReportsOperationCompleted(object arg) {
            if ((this.GetDynaReportsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDynaReportsCompleted(this, new GetDynaReportsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/CreateDynaReport", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateDynaReport(ConfigurationObjects domainConfig, string formId) {
            object[] results = this.Invoke("CreateDynaReport", new object[] {
                        domainConfig,
                        formId});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void CreateDynaReportAsync(ConfigurationObjects domainConfig, string formId) {
            this.CreateDynaReportAsync(domainConfig, formId, null);
        }
        
        /// CodeRemarks
        public void CreateDynaReportAsync(ConfigurationObjects domainConfig, string formId, object userState) {
            if ((this.CreateDynaReportOperationCompleted == null)) {
                this.CreateDynaReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateDynaReportOperationCompleted);
            }
            this.InvokeAsync("CreateDynaReport", new object[] {
                        domainConfig,
                        formId}, this.CreateDynaReportOperationCompleted, userState);
        }
        
        private void OnCreateDynaReportOperationCompleted(object arg) {
            if ((this.CreateDynaReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateDynaReportCompleted(this, new CreateDynaReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/GenerateReport", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateReport(ConfigurationObjects domainConfig, string apptId, string qFormId, string dateCompleted, string fileName, string reportId) {
            object[] results = this.Invoke("GenerateReport", new object[] {
                        domainConfig,
                        apptId,
                        qFormId,
                        dateCompleted,
                        fileName,
                        reportId});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GenerateReportAsync(ConfigurationObjects domainConfig, string apptId, string qFormId, string dateCompleted, string fileName, string reportId) {
            this.GenerateReportAsync(domainConfig, apptId, qFormId, dateCompleted, fileName, reportId, null);
        }
        
        /// CodeRemarks
        public void GenerateReportAsync(ConfigurationObjects domainConfig, string apptId, string qFormId, string dateCompleted, string fileName, string reportId, object userState) {
            if ((this.GenerateReportOperationCompleted == null)) {
                this.GenerateReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateReportOperationCompleted);
            }
            this.InvokeAsync("GenerateReport", new object[] {
                        domainConfig,
                        apptId,
                        qFormId,
                        dateCompleted,
                        fileName,
                        reportId}, this.GenerateReportOperationCompleted, userState);
        }
        
        private void OnGenerateReportOperationCompleted(object arg) {
            if ((this.GenerateReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateReportCompleted(this, new GenerateReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/Login", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Login(string domain, string deviceName, string username, string password) {
            object[] results = this.Invoke("Login", new object[] {
                        domain,
                        deviceName,
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void LoginAsync(string domain, string deviceName, string username, string password) {
            this.LoginAsync(domain, deviceName, username, password, null);
        }
        
        /// CodeRemarks
        public void LoginAsync(string domain, string deviceName, string username, string password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        domain,
                        deviceName,
                        username,
                        password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/PdfToPng", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PdfToPng(string inputFile, string outputFileName) {
            this.Invoke("PdfToPng", new object[] {
                        inputFile,
                        outputFileName});
        }
        
        /// CodeRemarks
        public void PdfToPngAsync(string inputFile, string outputFileName) {
            this.PdfToPngAsync(inputFile, outputFileName, null);
        }
        
        /// CodeRemarks
        public void PdfToPngAsync(string inputFile, string outputFileName, object userState) {
            if ((this.PdfToPngOperationCompleted == null)) {
                this.PdfToPngOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPdfToPngOperationCompleted);
            }
            this.InvokeAsync("PdfToPng", new object[] {
                        inputFile,
                        outputFileName}, this.PdfToPngOperationCompleted, userState);
        }
        
        private void OnPdfToPngOperationCompleted(object arg) {
            if ((this.PdfToPngCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PdfToPngCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/ConvertPDFtoPNG", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ConvertPDFtoPNG([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] arrPdf) {
            this.Invoke("ConvertPDFtoPNG", new object[] {
                        arrPdf});
        }
        
        /// CodeRemarks
        public void ConvertPDFtoPNGAsync(byte[] arrPdf) {
            this.ConvertPDFtoPNGAsync(arrPdf, null);
        }
        
        /// CodeRemarks
        public void ConvertPDFtoPNGAsync(byte[] arrPdf, object userState) {
            if ((this.ConvertPDFtoPNGOperationCompleted == null)) {
                this.ConvertPDFtoPNGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertPDFtoPNGOperationCompleted);
            }
            this.InvokeAsync("ConvertPDFtoPNG", new object[] {
                        arrPdf}, this.ConvertPDFtoPNGOperationCompleted, userState);
        }
        
        private void OnConvertPDFtoPNGOperationCompleted(object arg) {
            if ((this.ConvertPDFtoPNGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertPDFtoPNGCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dynadox.pro/service/ConvertPNGtoPDF", RequestNamespace="http://dynadox.pro/service", ResponseNamespace="http://dynadox.pro/service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ConvertPNGtoPDF() {
            this.Invoke("ConvertPNGtoPDF", new object[0]);
        }
        
        /// CodeRemarks
        public void ConvertPNGtoPDFAsync() {
            this.ConvertPNGtoPDFAsync(null);
        }
        
        /// CodeRemarks
        public void ConvertPNGtoPDFAsync(object userState) {
            if ((this.ConvertPNGtoPDFOperationCompleted == null)) {
                this.ConvertPNGtoPDFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertPNGtoPDFOperationCompleted);
            }
            this.InvokeAsync("ConvertPNGtoPDF", new object[0], this.ConvertPNGtoPDFOperationCompleted, userState);
        }
        
        private void OnConvertPNGtoPDFOperationCompleted(object arg) {
            if ((this.ConvertPNGtoPDFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertPNGtoPDFCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://dynadox.pro/service")]
    public partial class ConfigurationObjects {
        
        /// <remarks/>
        public string EmailSupport;
        
        /// <remarks/>
        public string EmailPostmaster;
        
        /// <remarks/>
        public string EmailRoy;
        
        /// <remarks/>
        public string EmailSmtp;
        
        /// <remarks/>
        public string EmailUser;
        
        /// <remarks/>
        public string EmailPass;
        
        /// <remarks/>
        public int EmailPort;
        
        /// <remarks/>
        public string ConnectionString;
        
        /// <remarks/>
        public string ConnectionName;
        
        /// <remarks/>
        public string DatabaseName;
        
        /// <remarks/>
        public string DomainHost;
        
        /// <remarks/>
        public string DomainRootPathVirtual;
        
        /// <remarks/>
        public string DomainRootPathPhysical;
        
        /// <remarks/>
        public string DomainClaimantsPathVirtual;
        
        /// <remarks/>
        public string DomainClaimantsPathPhysical;
        
        /// <remarks/>
        public DomainPath[] DomainPaths;
        
        /// <remarks/>
        public string DeviceId;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://dynadox.pro/service")]
    public partial class DomainPath {
        
        /// <remarks/>
        public string DomainPathName;
        
        /// <remarks/>
        public string DomainPathPhysical;
        
        /// <remarks/>
        public string DomainPathVirtual;
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void HelloDynaCompletedEventHandler(object sender, HelloDynaCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloDynaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloDynaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void BuildDynaMenuCompletedEventHandler(object sender, BuildDynaMenuCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuildDynaMenuCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BuildDynaMenuCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void ProcessDynaFilesCompletedEventHandler(object sender, ProcessDynaFilesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessDynaFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessDynaFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void GetFilesByDateCompletedEventHandler(object sender, GetFilesByDateCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilesByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilesByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void GetFilesCompletedEventHandler(object sender, GetFilesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void SaveFileCompletedEventHandler(object sender, SaveFileCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void GetAnswerPresetsCompletedEventHandler(object sender, GetAnswerPresetsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnswerPresetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnswerPresetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void GetAllAnswerPresetsCompletedEventHandler(object sender, GetAllAnswerPresetsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllAnswerPresetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllAnswerPresetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void LogPresetRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void SaveAnswerPresetCompletedEventHandler(object sender, SaveAnswerPresetCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveAnswerPresetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveAnswerPresetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void UpdateAnswerPresetJsonCompletedEventHandler(object sender, UpdateAnswerPresetJsonCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateAnswerPresetJsonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateAnswerPresetJsonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void DeleteAnswerPresetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void SaveDictationCompletedEventHandler(object sender, SaveDictationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveDictationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveDictationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void DeleteDicatationCompletedEventHandler(object sender, DeleteDicatationCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDicatationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDicatationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void GetFormDictationsCompletedEventHandler(object sender, GetFormDictationsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormDictationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormDictationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void GetAllAutoBoxDataCompletedEventHandler(object sender, GetAllAutoBoxDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllAutoBoxDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllAutoBoxDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void GenerateIME4CompletedEventHandler(object sender, GenerateIME4CompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateIME4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateIME4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void GenerateSummaryFromHtmlCompletedEventHandler(object sender, GenerateSummaryFromHtmlCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateSummaryFromHtmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateSummaryFromHtmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void GenerateSummaryCompletedEventHandler(object sender, GenerateSummaryCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void GetAllQuestionnairesCompletedEventHandler(object sender, GetAllQuestionnairesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllQuestionnairesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllQuestionnairesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void SubmitFormAnswersCompletedEventHandler(object sender, SubmitFormAnswersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitFormAnswersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitFormAnswersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void GetFormQuestionsCompletedEventHandler(object sender, GetFormQuestionsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormQuestionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormQuestionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void GetDoctorInputCompletedEventHandler(object sender, GetDoctorInputCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDoctorInputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDoctorInputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void GetDynaReportsCompletedEventHandler(object sender, GetDynaReportsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDynaReportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDynaReportsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void CreateDynaReportCompletedEventHandler(object sender, CreateDynaReportCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateDynaReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateDynaReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void GenerateReportCompletedEventHandler(object sender, GenerateReportCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void PdfToPngCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void ConvertPDFtoPNGCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.4.0.1033")]
    public delegate void ConvertPNGtoPDFCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
